IDLIST

What we (I) know about IDList and ItemID structures...

Feel free to contact Paul dot Tew at outlook dot com for me to acknowledge 
anyone else's (presumably awesome) work and incorporate your hacking (reverse
engineering) into this body of work...

ï The MS-SHLLINK specification gives the outline for the structure in Sections
  2.2, 2.2.1 & 2.2.2
  There is very little information on the content of the ItemID-Data property.
  As far as I can see they are just a list of SHITEMID (hilarious name btw)
  objects, see https://msdn.microsoft.com/en-us/library/windows/desktop/bb759800(v=vs.85).aspx
  with the last one having a TerminalID (effectively an ItemID with a size of 0x0000)

ï For most link files there seems to be a common ItemID[0] structure it is:
  unsigned AnsiChar data[20] = {
  0x14, 0x00, 0x1F, 0x50, 0xE0, 0x4F, 0xD0, 0x20, 0xEA, 0x3A, 0x69, 0x10, 0xA2,
  0xD8, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D
  };
  Which in ANSII (en-gb) looks like:
  ' P‡O– Í:i ¢ÿ  +00 '
  The first two bytes are undoubtably a 16 bit integer representing the size of
  the initial IDList object but the next 18 bytes are a mystery but appear to be 
  consistent (the same) among all link files that contain this ItemID.
  Sometimes this is the only ItemID (other than the TerminalID).

ï Some (older?) link files don't have this usual ItemID[0] structure.

ï Quite a few modern ItemID structures contain one or more Property Stores
  (see MS-PROPSTORE S2) which are not readily identifiable from the ItemID 
  header BUT, can be identified from the Serialized Property Storage version 
  number (0x53505331 Which, when the little endian 4 byte number is viewed in
  ANSI, is '1SPS'). This would seem to be a good method of identifying
  serialized property stores embedded within ItemID structures.
